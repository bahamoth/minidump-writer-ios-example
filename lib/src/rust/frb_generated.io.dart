// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  MinidumpApi dco_decode_box_autoadd_minidump_api(dynamic raw);

  @protected
  CrashType dco_decode_crash_type(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  MinidumpApi dco_decode_minidump_api(dynamic raw);

  @protected
  MinidumpResult dco_decode_minidump_result(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  MinidumpApi sse_decode_box_autoadd_minidump_api(SseDeserializer deserializer);

  @protected
  CrashType sse_decode_crash_type(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  MinidumpApi sse_decode_minidump_api(SseDeserializer deserializer);

  @protected
  MinidumpResult sse_decode_minidump_result(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(
    AnyhowException raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_minidump_api> cst_encode_box_autoadd_minidump_api(
    MinidumpApi raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_minidump_api();

    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
    Uint8List raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
    String? raw,
  ) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  void cst_api_fill_to_wire_minidump_api(
    MinidumpApi apiObj,
    wire_cst_minidump_api wireObj,
  ) {}

  @protected
  void cst_api_fill_to_wire_minidump_result(
    MinidumpResult apiObj,
    wire_cst_minidump_result wireObj,
  ) {
    wireObj.success = cst_encode_bool(apiObj.success);
    wireObj.error = cst_encode_opt_String(apiObj.error);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_crash_type(CrashType raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_minidump_api(
    MinidumpApi self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_crash_type(CrashType self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_minidump_api(MinidumpApi self, SseSerializer serializer);

  @protected
  void sse_encode_minidump_result(
    MinidumpResult self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  void store_dart_post_cobject(DartPostCObjectFnType ptr) {
    return _store_dart_post_cobject(ptr);
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
        'store_dart_post_cobject',
      );
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncRust2DartDco wire__crate__api__minidump_api_has_crash_triggers(
    ffi.Pointer<wire_cst_minidump_api> that,
  ) {
    return _wire__crate__api__minidump_api_has_crash_triggers(that);
  }

  late final _wire__crate__api__minidump_api_has_crash_triggersPtr =
      _lookup<
        ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_minidump_api>)
        >
      >(
        'frbgen_minidump_writer_test_wire__crate__api__minidump_api_has_crash_triggers',
      );
  late final _wire__crate__api__minidump_api_has_crash_triggers =
      _wire__crate__api__minidump_api_has_crash_triggersPtr
          .asFunction<
            WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_minidump_api>)
          >();

  void wire__crate__api__minidump_api_install_handlers(
    int port_,
    ffi.Pointer<wire_cst_minidump_api> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> dump_path,
  ) {
    return _wire__crate__api__minidump_api_install_handlers(
      port_,
      that,
      dump_path,
    );
  }

  late final _wire__crate__api__minidump_api_install_handlersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int64,
            ffi.Pointer<wire_cst_minidump_api>,
            ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          )
        >
      >(
        'frbgen_minidump_writer_test_wire__crate__api__minidump_api_install_handlers',
      );
  late final _wire__crate__api__minidump_api_install_handlers =
      _wire__crate__api__minidump_api_install_handlersPtr
          .asFunction<
            void Function(
              int,
              ffi.Pointer<wire_cst_minidump_api>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
            )
          >();

  WireSyncRust2DartDco wire__crate__api__minidump_api_new() {
    return _wire__crate__api__minidump_api_new();
  }

  late final _wire__crate__api__minidump_api_newPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function()>>(
        'frbgen_minidump_writer_test_wire__crate__api__minidump_api_new',
      );
  late final _wire__crate__api__minidump_api_new =
      _wire__crate__api__minidump_api_newPtr
          .asFunction<WireSyncRust2DartDco Function()>();

  WireSyncRust2DartDco wire__crate__api__minidump_api_test(
    ffi.Pointer<wire_cst_minidump_api> that,
  ) {
    return _wire__crate__api__minidump_api_test(that);
  }

  late final _wire__crate__api__minidump_api_testPtr =
      _lookup<
        ffi.NativeFunction<
          WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_minidump_api>)
        >
      >('frbgen_minidump_writer_test_wire__crate__api__minidump_api_test');
  late final _wire__crate__api__minidump_api_test =
      _wire__crate__api__minidump_api_testPtr
          .asFunction<
            WireSyncRust2DartDco Function(ffi.Pointer<wire_cst_minidump_api>)
          >();

  void wire__crate__api__minidump_api_trigger_crash(
    int port_,
    ffi.Pointer<wire_cst_minidump_api> that,
    int crash_type,
  ) {
    return _wire__crate__api__minidump_api_trigger_crash(
      port_,
      that,
      crash_type,
    );
  }

  late final _wire__crate__api__minidump_api_trigger_crashPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int64,
            ffi.Pointer<wire_cst_minidump_api>,
            ffi.Int32,
          )
        >
      >(
        'frbgen_minidump_writer_test_wire__crate__api__minidump_api_trigger_crash',
      );
  late final _wire__crate__api__minidump_api_trigger_crash =
      _wire__crate__api__minidump_api_trigger_crashPtr
          .asFunction<
            void Function(int, ffi.Pointer<wire_cst_minidump_api>, int)
          >();

  void wire__crate__api__minidump_api_write_dump(
    int port_,
    ffi.Pointer<wire_cst_minidump_api> that,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> path,
  ) {
    return _wire__crate__api__minidump_api_write_dump(port_, that, path);
  }

  late final _wire__crate__api__minidump_api_write_dumpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Int64,
            ffi.Pointer<wire_cst_minidump_api>,
            ffi.Pointer<wire_cst_list_prim_u_8_strict>,
          )
        >
      >(
        'frbgen_minidump_writer_test_wire__crate__api__minidump_api_write_dump',
      );
  late final _wire__crate__api__minidump_api_write_dump =
      _wire__crate__api__minidump_api_write_dumpPtr
          .asFunction<
            void Function(
              int,
              ffi.Pointer<wire_cst_minidump_api>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
            )
          >();

  ffi.Pointer<wire_cst_minidump_api> cst_new_box_autoadd_minidump_api() {
    return _cst_new_box_autoadd_minidump_api();
  }

  late final _cst_new_box_autoadd_minidump_apiPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<wire_cst_minidump_api> Function()>
      >('frbgen_minidump_writer_test_cst_new_box_autoadd_minidump_api');
  late final _cst_new_box_autoadd_minidump_api =
      _cst_new_box_autoadd_minidump_apiPtr
          .asFunction<ffi.Pointer<wire_cst_minidump_api> Function()>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(len);
  }

  late final _cst_new_list_prim_u_8_strictPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)
        >
      >('frbgen_minidump_writer_test_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
        'dummy_method_to_enforce_bundling',
      );
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType =
    ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;
typedef DartPostCObjectFnTypeFunction =
    ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction =
    bool Function(DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

final class wire_cst_minidump_api extends ffi.Opaque {}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_minidump_result extends ffi.Struct {
  @ffi.Bool()
  external bool success;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error;
}
